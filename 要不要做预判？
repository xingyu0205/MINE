https://github.com/Kenneth-Lee/MySummary/blob/master/%E8%BD%AF%E4%BB%B6%E6%9E%84%E6%9E%B6%E8%AE%BE%E8%AE%A1/%E5%A4%A7%E6%88%90%E8%8B%A5%E7%BC%BA.rst 
if (buffer_size > 4 * MB) {
  pr_err("too much memory\n")
    return -ENOMEM;
    }

    buffer = kmalloc(buffer_size, GFP_KERNEL);
    ...
"我就好奇了，为什么要限制自己的buffer的大小在4M以下呢？后来一问，原来作者是这样 考量的，Linux由于slab算法的限制，内核内存分配不能超过4M，超过就失败了。"


其实放在现在的组里 写code或者design的时候也是如此 有些逻辑不应该precheck  直接返回下游的error就行 万一下游的业务逻辑有变化 那自己写的precheck就不成立 这样维护的成本就变高了 
总体来说 应该是如果逻辑已经有别的process 去valid 那自己本身的逻辑就不要做不预判 这就做大成若缺 设计自己的模块的时候千万不要想到面面俱到 这是不可能的 也算是一种数穷 按理说是不存在一个面面俱到的模块的 

